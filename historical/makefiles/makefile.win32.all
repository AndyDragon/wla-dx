
CC = gcc
CFLAGS = -c -Os -s -ansi -pedantic -Wall -DMSDOS -D $(WLA1)
LD = gcc
LDFLAGS = -lm
WLAFLAGS = $(CFLAGS)

CFILES = main.c parse.c include.c pass_1.c pass_2.c pass_3.c pass_4.c stack.c listfile.c crc32.c hashmap.c printf.c mersenne.c instructions_$(WLA2)_tables.c instructions_$(WLA2).c
HFILES = main.h parse.h include.h pass_1.h pass_2.h pass_3.h pass_4.h stack.h listfile.h crc32.h hashmap.h printf.h mersenne.h defines.h
OFILES = main.o parse.o include.o pass_1.o pass_2.o pass_3.o pass_4.o stack.o listfile.o crc32.o hashmap.o printf.o mersenne.o instructions_$(WLA2)_tables.c instructions_$(WLA2).c


all: $(OFILES) makefile
	$(LD) $(LDFLAGS) $(OFILES) -o wla-$(WLA2).exe

main.o: main.c defines.h main.h makefile
	$(CC) $(CFLAGS) main.c

printf.o: printf.c printf.h makefile
	$(CC) $(CFLAGS) printf.c

parse.o: parse.c defines.h parse.h makefile
	$(CC) $(CFLAGS) parse.c

include.o: include.c defines.h include.h makefile
	$(CC) $(CFLAGS) include.c

instructions_$(WLA2)_tables.o: instructions_$(WLA2)_tables.c
	$(CC) $(CFLAGS) instructions_$(WLA2)_tables.c

instructions_$(WLA2).o: instructions_$(WLA2).c
	$(CC) $(CFLAGS) instructions_$(WLA2).c

pass_1.o: pass_1.c defines.h pass_1.h parse.h makefile instructions_$(WLA2).c
	$(CC) $(CFLAGS) pass_1.c

pass_2.o: pass_2.c defines.h pass_2.h makefile
	$(CC) $(CFLAGS) pass_2.c

pass_3.o: pass_3.c defines.h pass_3.h makefile
	$(CC) $(CFLAGS) pass_3.c

pass_4.o: pass_4.c defines.h pass_4.h makefile
	$(CC) $(CFLAGS) pass_4.c

stack.o: stack.c defines.h stack.h makefile
	$(CC) $(CFLAGS) stack.c

listfile.o: listfile.c defines.h listfile.h makefile
	$(CC) $(CFLAGS) listfile.c

crc32.o: crc32.c defines.h crc32.h makefile
	$(CC) $(CFLAGS) crc32.c

hashmap.o: hashmap.c defines.h hashmap.h makefile
	$(CC) $(CFLAGS) hashmap.c

mersenne.o: mersenne.c defines.h mersenne.h makefile
	$(CC) $(WLAFLAGS) mersenne.c

$(OFILES): $(HFILES)
