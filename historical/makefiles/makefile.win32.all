
CC = gcc
CFLAGS = -c -Os -s -ansi -pedantic -Wall -DMSDOS -D $(WLA1)
LD = gcc
LDFLAGS = -lm
WLAFLAGS = $(CFLAGS)

CFILES = main.c parse.c include.c phase_1.c phase_2.c phase_3.c phase_4.c stack.c listfile.c crc32.c hashmap.c printf.c mersenne.c t$(WLA2).c i$(WLA2).c
HFILES = main.h parse.h include.h phase_1.h phase_2.h phase_3.h phase_4.h stack.h listfile.h crc32.h hashmap.h printf.h mersenne.h defines.h
OFILES = main.o parse.o include.o phase_1.o phase_2.o phase_3.o phase_4.o stack.o listfile.o crc32.o hashmap.o printf.o mersenne.o t$(WLA2).c i$(WLA2).c


all: $(OFILES) makefile
	$(LD) $(LDFLAGS) $(OFILES) -o wla-$(WLA2).exe

main.o: main.c defines.h main.h makefile
	$(CC) $(CFLAGS) main.c

printf.o: printf.c printf.h makefile
	$(CC) $(CFLAGS) printf.c

parse.o: parse.c defines.h parse.h makefile
	$(CC) $(CFLAGS) parse.c

include.o: include.c defines.h include.h makefile
	$(CC) $(CFLAGS) include.c

t$(WLA2).o: t$(WLA2).c
	$(CC) $(CFLAGS) t$(WLA2).c

i$(WLA2).o: i$(WLA2).c
	$(CC) $(CFLAGS) i$(WLA2).c

phase_1.o: phase_1.c defines.h phase_1.h parse.h makefile i$(WLA2).c
	$(CC) $(CFLAGS) phase_1.c

phase_2.o: phase_2.c defines.h phase_2.h makefile
	$(CC) $(CFLAGS) phase_2.c

phase_3.o: phase_3.c defines.h phase_3.h makefile
	$(CC) $(CFLAGS) phase_3.c

phase_4.o: phase_4.c defines.h phase_4.h makefile
	$(CC) $(CFLAGS) phase_4.c

stack.o: stack.c defines.h stack.h makefile
	$(CC) $(CFLAGS) stack.c

listfile.o: listfile.c defines.h listfile.h makefile
	$(CC) $(CFLAGS) listfile.c

crc32.o: crc32.c defines.h crc32.h makefile
	$(CC) $(CFLAGS) crc32.c

hashmap.o: hashmap.c defines.h hashmap.h makefile
	$(CC) $(CFLAGS) hashmap.c

mersenne.o: mersenne.c defines.h mersenne.h makefile
	$(CC) $(WLAFLAGS) mersenne.c

$(OFILES): $(HFILES)
